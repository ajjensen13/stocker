// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	"context"
	"github.com/Finnhub-Stock-API/finnhub-go"
	"github.com/ajjensen13/gke"
	"github.com/ajjensen13/stocker/internal/extract"
	"github.com/golang-migrate/migrate/v4"
	"github.com/jackc/pgx/v4"
	"net/url"
	"time"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func timezone() (*time.Location, error) {
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, err
	}
	location, err := provideTimezone(cmdAppConfig)
	if err != nil {
		return nil, err
	}
	return location, nil
}

func requestStocks(ctx context.Context, lg gke.Logger) ([]finnhub.Stock, error) {
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return nil, err
	}
	cmdApiAuthContext := provideApiAuthContext(ctx, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackoff()
	notify := provideBackoffNotifier(lg)
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, err
	}
	v, err := provideStocks(cmdApiAuthContext, lg, defaultApiService, backOff, notify, cmdAppConfig)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func requestCandles(ctx context.Context, lg gke.Logger, stock finnhub.Stock, latest latestStocks) (finnhub.StockCandles, error) {
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return finnhub.StockCandles{}, err
	}
	cmdApiAuthContext := provideApiAuthContext(ctx, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackoff()
	notify := provideBackoffNotifier(lg)
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return finnhub.StockCandles{}, err
	}
	cmdLatestStock := provideLatestStock(stock, latest)
	location, err := provideTimezone(cmdAppConfig)
	if err != nil {
		return finnhub.StockCandles{}, err
	}
	cmdCandleConfig := provideCandleConfig(cmdAppConfig, cmdLatestStock, location)
	stockCandles, err := provideCandles(cmdApiAuthContext, lg, defaultApiService, backOff, notify, stock, cmdCandleConfig)
	if err != nil {
		return finnhub.StockCandles{}, err
	}
	return stockCandles, nil
}

func requestCompanyProfile(ctx context.Context, lg gke.Logger, stock finnhub.Stock) (finnhub.CompanyProfile2, error) {
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return finnhub.CompanyProfile2{}, err
	}
	cmdApiAuthContext := provideApiAuthContext(ctx, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackoff()
	notify := provideBackoffNotifier(lg)
	companyProfile2, err := provideCompanyProfiles(cmdApiAuthContext, lg, defaultApiService, backOff, notify, stock)
	if err != nil {
		return finnhub.CompanyProfile2{}, err
	}
	return companyProfile2, nil
}

func queryMostRecentCandles(ctx context.Context, lg gke.Logger, tx pgx.Tx) (latestStocks, error) {
	v, err := extract.LatestStocks(ctx, tx)
	if err != nil {
		return nil, err
	}
	cmdLatestStocks := provideLatestStocks(v)
	return cmdLatestStocks, nil
}

func dataSourceName() (*url.URL, error) {
	userinfo, err := provideDbSecrets()
	if err != nil {
		return nil, err
	}
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, err
	}
	urlURL, err := provideDataSourceName(userinfo, cmdAppConfig)
	if err != nil {
		return nil, err
	}
	return urlURL, nil
}

func openTx(ctx context.Context) (pgx.Tx, func(), error) {
	urlURL, err := dataSourceName()
	if err != nil {
		return nil, nil, err
	}
	pool, cleanup, err := provideDbConnPool(ctx, urlURL)
	if err != nil {
		return nil, nil, err
	}
	conn, cleanup2, err := provideDbConn(ctx, pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	txOptions := _wireTxOptionsValue
	tx, err := provideDbTx(ctx, conn, txOptions)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return tx, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireTxOptionsValue = pgx.TxOptions{}
)

func migrationSourceURL() (string, error) {
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return "", err
	}
	string2 := provideMigrationSourceURL(cmdAppConfig)
	return string2, nil
}

func logger() (gke.Logger, func()) {
	gkeLogger, cleanup := provideLogger()
	return gkeLogger, func() {
		cleanup()
	}
}

func migrator(lg gke.Logger) (*migrate.Migrate, error) {
	urlURL, err := dataSourceName()
	if err != nil {
		return nil, err
	}
	string2, err := migrationSourceURL()
	if err != nil {
		return nil, err
	}
	migrateMigrate, err := provideMigrator(lg, urlURL, string2)
	if err != nil {
		return nil, err
	}
	return migrateMigrate, nil
}
