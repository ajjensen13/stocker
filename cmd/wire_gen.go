// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	"context"
	"github.com/Finnhub-Stock-API/finnhub-go"
	"github.com/ajjensen13/gke"
	"github.com/ajjensen13/stocker/internal/external"
	"github.com/ajjensen13/stocker/internal/src"
	"github.com/ajjensen13/stocker/internal/stage"
	"github.com/cenkalti/backoff/v4"
	"github.com/golang-migrate/migrate/v4"
	"github.com/google/wire"
	"github.com/jackc/pgx/v4/pgxpool"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func retrieveStocks(ctx backoff.BackOffContext) ([]finnhub.Stock, error) {
	context := provideContext(ctx)
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return nil, err
	}
	cmdApiAuthContext := provideApiAuthContext(context, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, err
	}
	v, err := retrieveStocksImpl(cmdApiAuthContext, defaultApiService, backOff, notify, cmdAppConfig)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func saveStocksFromFinnhub(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool, ss []finnhub.Stock) error {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	error2 := src.InsertStocks(context, pool2, jobRunId, ss, backOff, notify)
	return error2
}

func stageStocks(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool) (stage.StagingInfo, error) {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	stagingInfo, err := stage.Stocks(context, pool2, jobRunId, backOff, notify)
	if err != nil {
		return stage.StagingInfo{}, err
	}
	return stagingInfo, nil
}

func extractCandles(ctx backoff.BackOffContext, stock finnhub.Stock, latest latestStocks) (external.StockCandlesWithMetadata, error) {
	context := provideContext(ctx)
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return external.StockCandlesWithMetadata{}, err
	}
	cmdApiAuthContext := provideApiAuthContext(context, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return external.StockCandlesWithMetadata{}, err
	}
	cmdLatestStock := provideLatestStock(stock, latest)
	location, err := provideTimezone(cmdAppConfig)
	if err != nil {
		return external.StockCandlesWithMetadata{}, err
	}
	cmdCandleConfig := provideCandleConfig(cmdAppConfig, cmdLatestStock, location)
	stockCandlesWithMetadata, err := retrieveCandlesImpl(cmdApiAuthContext, defaultApiService, backOff, notify, stock, cmdCandleConfig)
	if err != nil {
		return external.StockCandlesWithMetadata{}, err
	}
	return stockCandlesWithMetadata, nil
}

func loadCandles(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool, ss external.StockCandlesWithMetadata) error {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	error2 := src.InsertCandles(context, jobRunId, pool2, ss, backOff, notify)
	return error2
}

func stageCandles(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool, symbol string) (stage.StagingInfo, error) {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return stage.StagingInfo{}, err
	}
	location, err := provideTimezone(cmdAppConfig)
	if err != nil {
		return stage.StagingInfo{}, err
	}
	stagingInfo, err := stage.Candles(context, jobRunId, pool2, backOff, notify, location)
	if err != nil {
		return stage.StagingInfo{}, err
	}
	return stagingInfo, nil
}

func stage52WkCandles(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool, symbol string) (stage.StagingInfo, error) {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	stagingInfo, err := stage.Candles52Wk(context, jobRunId, pool2, symbol, backOff, notify)
	if err != nil {
		return stage.StagingInfo{}, err
	}
	return stagingInfo, nil
}

func retrieveCompanyProfile(ctx backoff.BackOffContext, stock finnhub.Stock) (finnhub.CompanyProfile2, error) {
	context := provideContext(ctx)
	cmdAppSecrets, err := provideAppSecrets()
	if err != nil {
		return finnhub.CompanyProfile2{}, err
	}
	cmdApiAuthContext := provideApiAuthContext(context, cmdAppSecrets)
	defaultApiService := provideApiServiceClient()
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	companyProfile2, err := retrieveCompanyProfileImpl(cmdApiAuthContext, defaultApiService, backOff, notify, stock)
	if err != nil {
		return finnhub.CompanyProfile2{}, err
	}
	return companyProfile2, nil
}

func loadCompanyProfile(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool, cp finnhub.CompanyProfile2) error {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	error2 := src.InsertCompanyProfile(context, jobRunId, pool2, cp, backOff, notify)
	return error2
}

func stageCompanyProfiles(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool) (stage.StagingInfo, error) {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	stagingInfo, err := stage.CompanyProfiles(context, jobRunId, pool2, backOff, notify)
	if err != nil {
		return stage.StagingInfo{}, err
	}
	return stagingInfo, nil
}

func queryMostRecentCandles(ctx backoff.BackOffContext, jobRunId uint64, pool2 *pgxpool.Pool) (latestStocks, error) {
	context := provideContext(ctx)
	backOff := provideBackOff(ctx)
	notify := provideBackoffNotifier(context)
	v, err := stage.LatestCandles(context, pool2, backOff, notify)
	if err != nil {
		return nil, err
	}
	cmdLatestStocks := provideLatestStocks(v)
	return cmdLatestStocks, nil
}

func pool(ctx context.Context) (*pgxpool.Pool, func(), error) {
	userinfo, err := provideDbSecrets()
	if err != nil {
		return nil, nil, err
	}
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, nil, err
	}
	url, err := provideDataSourceName(userinfo, cmdAppConfig)
	if err != nil {
		return nil, nil, err
	}
	cmdDbConnPoolConfig := cmdAppConfig.DbConnPoolConfig
	cmdDbPoolDsn, err := provideDbPoolDsn(url, cmdDbConnPoolConfig)
	if err != nil {
		return nil, nil, err
	}
	pgxpoolPool, cleanup, err := provideDbConnPool(ctx, cmdDbPoolDsn)
	if err != nil {
		return nil, nil, err
	}
	return pgxpoolPool, func() {
		cleanup()
	}, nil
}

func logger() (gke.Logger, func()) {
	gkeLogger, cleanup := provideLogger()
	return gkeLogger, func() {
		cleanup()
	}
}

func migrator(lg gke.Logger) (*migrate.Migrate, error) {
	userinfo, err := provideDbSecrets()
	if err != nil {
		return nil, err
	}
	cmdAppConfig, err := provideAppConfig()
	if err != nil {
		return nil, err
	}
	url, err := provideDataSourceName(userinfo, cmdAppConfig)
	if err != nil {
		return nil, err
	}
	migrationSourceURL := cmdAppConfig.MigrationSourceURL
	migrateMigrate, err := provideMigrator(lg, url, migrationSourceURL)
	if err != nil {
		return nil, err
	}
	return migrateMigrate, nil
}

// wire.go:

var (
	cfg    = wire.NewSet(provideAppConfig, provideAppSecrets, provideCandleConfig, provideTimezone, wire.FieldsOf(new(*appConfig), "MigrationSourceURL"))
	client = wire.NewSet(provideApiServiceClient, provideApiAuthContext)
	db     = wire.NewSet(provideDataSourceName, provideDbSecrets, provideDbConnPool, wire.FieldsOf(new(*appConfig), "DbConnPoolConfig"), provideDbPoolDsn)
	bo     = wire.NewSet(provideBackOff, provideContext, provideBackoffNotifier)
)

func provideBackOff(bo2 backoff.BackOffContext) backoff.BackOff {
	return bo2
}

func provideContext(bo2 backoff.BackOffContext) context.Context {
	return bo2.Context()
}
